import org.yaml.snakeyaml.Yaml

buildscript {
    repositories {
        maven {
            url "https://repo.nos.to/content/repositories/central/"
            credentials {
                username = "$mavenUser"
                password = "$mavenPassword"
            }
        }
    }
    dependencies {
        classpath group: 'org.yaml', name: 'snakeyaml', version: '2.2'
    }
}

plugins {
    id 'java'
    id 'maven-publish'
}

group 'com.nosto.play'
version '1.8.0-nosto-GA-4'

java {
    withSourcesJar()
}

sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
        resources {
            srcDirs = ['src']
        }
    }
    test {
        java {
            srcDirs = ['test-src']
        }
        resources {
            srcDirs = ['test-src']
        }

        output.resourcesDir = "build/classes/java/test"
    }
}

def deps = new Yaml().load(file("dependencies.yml").text)


repositories {
    mavenLocal()
    maven {
        name "NostoCentral"
        url "https://repo.nos.to/content/repositories/central/"
        credentials {
            username = "$mavenUser"
            password = "$mavenPassword"
        }
    }
    maven {
        name "NostoDependencies"
        url 'https://repo.nos.to/content/repositories/NostoDependencies/'
        credentials {
            username "$mavenUser"
            password "$mavenPassword"
        }
    }
}

dependencies {
    deps.require.each {
        def lv = it.split(" ")
        def version = lv[lv.size() - 1]
        def lib = it.substring(0, it.length() - version.length()).split("->")
        def group = lib[0]
        def name = lib.size() > 1 ? lib[1] : group
        implementation(group: group.trim(), name: name.trim(), version: version.trim(), {
            transitive = false
        })
    }
    // not in `dependencies.yml` as in upstream, but present in libs and required for templates
    implementation group: 'commons-collections', name: 'commons-collections', version: '3.2.2'

    // libs not listed in dependencies.yml, but required for compilation
    compileOnly(group: 'org.apache.ant', name: 'ant', version: '1.10.14')
    compileOnly(group: 'org.apache.ant', name: 'ant-junit', version: '1.10.14')
    compileOnly group: 'com.google.code.maven-play-plugin.org.playframework', name: 'jj-simplecaptcha', version: '1.1'

    testImplementation(group: 'org.apache.ant', name: 'ant', version: '1.10.14')
    testImplementation(group: 'org.apache.ant', name: 'ant-junit', version: '1.10.14')
    testImplementation(group: 'org.easytesting', name: 'fest-assert', version: '1.4')
    testImplementation(group: 'org.easytesting', name: 'fest-util', version: '1.1.6')
    testImplementation(group: 'org.mockito', name: 'mockito-core', version: '2.21.0')
    testImplementation(group: 'org.objenesis', name: 'objenesis', version: '2.6')
}

jar {
    manifest {
        attributes 'Premain-Class': 'play.classloading.HotswapAgent',
                'Can-Redefine-Classes': true,
                'Built-JDK': System.getProperty('java.version'),
                'Name': 'Play',
                'Specification-Title': 'Play! framework'
    }
}

tasks.named('sourcesJar', Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task assembleRunscripts(type: Zip) {
    archiveBaseName = 'play'
    description "Assemble archive $archiveBaseName"
    from("../play")
    from("pym") {
        into("framework/pym")
    }
    from("templates") {
        into("framework/templates")
    }
    from("../modules/testrunner/lib") {
        into("modules/testrunner/lib")
    }
}

task copyDependencies(type: Copy) {
    from configurations.runtimeClasspath
    into "lib-gradle"
}

def validate(task, command, message) {
    task.commandLine "sh", "-c", command
    task.setIgnoreExitValue(true)
    task.doLast {
        if (executionResult.get().exitValue != 0) {
            throw new GradleException(message)
        }
    }
}

task validateGitStatus(type: Exec) {
   validate(delegate, "git diff --quiet", "Unable to publish: git status is not clean, please commit your changes first.")
}

task validateGitBranch(type: Exec) {
    validate(delegate,
            "git branch -r --contains HEAD | grep origin/HEAD",
            "Unable to publish: Current commit doesnt belong to origin/HEAD (origin/master) branch, please push and merge your changes first.")
}

task validateGitTags(type: Exec) {
    validate(delegate,
            "[ \"\$(git rev-parse HEAD)\" = \"\$(git ls-remote --exit-code origin \"refs/tags/$version^{}\" |  awk '{print \$1}' )\" ]",
            "Unable to publish: Current commit is not tagged or not pushed, please tag it with $version first and don't forget to push the $version tag to origin.")
}

if(!version.toString().matches(".*-SNAPSHOT|.*-testing")) {
    tasks.publish.dependsOn validateGitStatus
    tasks.publish.dependsOn validateGitBranch
    tasks.publish.dependsOn validateGitTags
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId "play"
            from components.java
        }
        mavenZip(MavenPublication) {
            artifactId "play-zip"
            artifact assembleRunscripts
        }
        maven(MavenPublication) {
            groupId = "com.nosto.play"
            artifactId = "play-test"

            pom {
                name = "play-test"
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    configurations.testImplementation.dependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name "NostoDependencies"
            url 'https://repo.nos.to/content/repositories/NostoDependencies/'
            credentials {
                username "$mavenUser"
                password "$mavenPassword"
            }
        }
    }
}
